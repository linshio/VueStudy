vue路由

安装路由 npm i vue-router@3 (支持vue2)

路由的query参数

1.传递参数
  <!-- 跳转路由并且携带query参数，to的字符串写法 -->
  <router-link :to="`/home/message/detail?id=${item.id}&title=${item.title}`">{{ item.title }}</router-link>&nbsp;&nbsp;
  
  <!-- 跳转路由并携带query参数，to的对象写法 -->
  <router-link :to="{
    path:'/home/message/detail',
    query:{
      id:item.id,
      title:item.title
    }
  }">
    {{ item.title }}
  </router-link>
2.接收参数

<li>消息编号：{{ $route.query.id }}</li>
<li>消息标题：{{ $route.query.title }}</li>

3.命名路由
  1.作用：可以简化路由的跳转
  2.如何使用 ：
    1）给路由命名： name属性
    children:[
            {
              name:'xiangqing',
              path:'detail',
              component:Detail  
            }
          ]
    2）简化跳转流程
    <router-link :to="{
          name:'xiangqing',
          query:{
            id:item.id,
            title:item.title
          }
        }">
          {{ item.title }}
        </router-link>&nbsp;&nbsp;

4.路由的params参数
    <!-- 跳转路由并且携带param参数，to的字符串写法 -->
    <router-link :to="`/home/message/detail/${item.id}/${item.title}`">{{ item.title }}</router-link>&nbsp;&nbsp;

    <!-- 跳转路由并且携带param参数，to的对象写法 -->
    <router-link :to="{
      name:'xiangqing',
      params:{
        id:item.id,
        title:item.title
      }
    }">
      {{ item.title }}
    </router-link>&nbsp;&nbsp;

注意事项==> 路由携带params参数的时候，若使用to的对象写法，则不能够使用path配置项，必须使用name配置


5.<router-link>的replace属性
  1.作用：控制路由跳转时操作浏览器历史记录的模式
  2.浏览器的历史记录有两种写入方式哦：分别为push和replace,push为追加的历史记录,replace是替换当前的记录,路由跳转的时候默认为push
  3，如何开启replace模式 加上replace属性即可
    <router-link class="list-group-item" replace active-class="active" to="/home/news">News</router-link>

6.编程式路由导航
  1）不借助<router-link></router-link>实现路由的跳转，可以让跳转更加的灵活
  2）
    this.$router.back()//后退
    this.$router.forward()//前进
    this.$router.go()//随意跳转 正数为向前跳转几次 负数可以向后跳转几次

7.缓存路由组件
  1.作用：让不展示的路由组件保持挂载，不让销毁
  2.具体编码  include="News" 其中的News为组件名，不是路由名
      <keep-alive include="News">
        <router-view></router-view>
      </keep-alive>

  3.缓存多个组件的写法：
      <keep-alive :include="['News','Message']">
        <router-view></router-view>
      </keep-alive>
8.两个新的生命周期钩子
  1.作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。
  2具体名字：
    1.activated()   路由组件被激活的时候进行触发
    2.deactivated() 路由组件失活的时候进行触发
    
9.路由守卫
  1.作用：对路由进行权限控制
  2.分类：全局守卫、独享守卫、组件内守卫
  3.全局守卫：
    //全局前置路由守卫----每次路由切换之前会被调用
    //初始化的时候会被调用
    //在每一次路由切换之前都会帮助我调用这个函数
    //to   ==> 需要切换到的目的地路由，要去哪
    //from ==> 当前切换出去的路由，来自哪个路由
    //next ==> 放行函数
    router.beforeEach((to,from,next)=>{
      console.log('beforeEach==>>');
      console.log('to ==> ',to);
      console.log('from ==> ',from);
      if(to.meta.isAuth){//判断是否需要进行鉴权
        if(localStorage.getItem('school')==='linshio'){
          next()
        }else{
          alert('无权限')
        }
      }else{
        next()
      }
    })

    //全局后置路由守卫----每次路由切换之后会被调用
    router.afterEach((to,from)=>{
      console.log('afterEach==>>');
      console.log('to ==> ',to);
      console.log('from ==> ',from);
      document.title = to.meta.title || '无'
    })
